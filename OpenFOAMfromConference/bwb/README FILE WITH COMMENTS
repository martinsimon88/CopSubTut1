How to run me:



#To run in parallel:

rm *.obj > /dev/null 2>&1

rm 0/* > /dev/null 2>&1

foamClearPolyMesh

foamCleanTutorials



#Whole body
#surfaceOrient constant/triSurface/N2A_Hybrid.stl '(1e9 1e9 1e9)' constant/triSurface/new.stl

#surfaceTransformPoints -scale '(0.3048 0.3048 0.3048)' constant/triSurface/N2A_Hybrid.stl constant/triSurface/surfacemesh.stl
#cp constant/triSurface/N2A_Hybrid.stl constant/triSurface/surfacemesh.stl

#Half body
surfaceTransformPoints -scale '(0.3048 0.3048 0.3048)' constant/triSurface/half.stl constant/triSurface/scale.stl
cp constant/triSurface/scale.stl constant/triSurface/surfacemesh.stl
rm constant/triSurface/scale.stl

#If you use this utility additionally to checking the surface, it will create two additional files
#What are those files? How can you use then?
surfaceCheck constant/triSurface/surfacemesh.stl

#Added by Martin, don't know how to use it yet: Before we do anything else, another important step is to normalize and unify the surface normals of the geometry. If they are oriented inconsistently, meaning two adjoining triangles have their face normals pointing towards the inside and outside of the geometry, respectively, some undesirable effects in the meshing process can occur. The most annoying one is that snappyHexMesh may regard this as a significant change in the geometry and refines this automatically. This even happens on perfectly flat surfaces. 
#Some more instructions in ParaView: ParaView does a weird thing, in the "Color By" drop down menu, it show an
array named "cellNormals" but this array doesn't actually exist on the data
object, and it doesn't appear in the information tab.  So, as Berk said,
you should apply the Generate Surface Normals filter, and make sure you
check the "Compute Cell Normals" check box.  Then you can use the "Cell
Centers" to generate point data at the cell centers.  Then you can use the
Glyph filter to draw the arrows for the cell normals.

surfaceOrient constant/triSurface/surfacemesh.stl "(1e10 1e10 1e10)" constant/triSurface/surfacemeshGlyph.stl
surfaceOrient constant/triSurface/half.stl "(1e10 1e10 1e10)" constant/triSurface/halfGlyph.stl

surfaceFeatureExtract -noFunctionObjects



blockMesh

decomposePar

mpirun -np 4 snappyHexMesh -parallel 

mpirun -np 4 checkMesh -parallel -time 3 

reconstructParMesh

checkMesh -latestTime

patchSummary -latestTime



#The option -builtin will let you visualize the decomposed mesh and the boundary layer fields saved in 3
paraFoam -builtin



#To transfer the final mesh to constant polyMesh

cp 3/polyMesh/* constant/polyMesh/

rm -rf 1 > /dev/null 2>&1

rm -rf 2 > /dev/null 2>&1

rm -rf 3 > /dev/null 2>&1

createPatch -overwrite

mirrorMesh -noFunctionObjects

checkMesh

paraFoam




NOTE0:
Geometry generated using OpenVSP

NOTE1:
Use the option -overwrite to avoid the step of transferring the final mesh to the folder constant/polyMesh

NOTE2:
Before running the simulation you will need to decompose the fiels.  You can use the option -force
